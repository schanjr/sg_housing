{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import altair as alt\n",
    "\n",
    "df = pd.read_csv('./resale-flat-prices/2017-and-beyond-annotated.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Cell for getting coordinates, don't need to run this usually.\n",
    "# import pandas as pd\n",
    "# import lib.map_utils as mp\n",
    "# import importlib\n",
    "# importlib.reload(mp)\n",
    "#\n",
    "#\n",
    "#\n",
    "# # df = pd.read_csv('./resale-flat-prices/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv')\n",
    "# map_urls = list(map(mp.map_search_url, df.street_name.unique()))\n",
    "# results = mp.parallelize_http(map_urls)\n",
    "# map_url_memo = {}\n",
    "# for res in results:\n",
    "#     search_val = res['response_obj'].url_obj.query['searchVal']\n",
    "#     map_url_memo[search_val] = res['body']['results'][0]\n",
    "#\n",
    "# for index, row in df.iterrows():\n",
    "#     map_data = map_url_memo[row.street_name]\n",
    "#     df.at[index, 'longitude'] =  map_data['LONGITUDE']\n",
    "#     df.at[index, 'latitude'] =  map_data['LATITUDE']\n",
    "#     df.at[index, 'postal'] = map_data['POSTAL']\n",
    "# df.to_csv('./resale-flat-prices/2017-and-beyond-annotated.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['month'] = pd.to_datetime(df['month'])\n",
    "df = df[df[\"month\"] >\"2018-01-01\"]\n",
    "df\n",
    "\n",
    "alt.data_transformers.enable('default', max_rows=None)\n",
    "alt.Chart(df).mark_line().encode(x='month',y='resale_price',color='flat_type', strokeDash='flat_type',)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pydeck as pdk\n",
    "\n",
    "# Define a layer to display on a map\n",
    "layer = pdk.Layer(\n",
    "    \"HexagonLayer\",\n",
    "    data=df,\n",
    "    get_position=[\"longitude\", \"latitude\"],\n",
    "    auto_highlight=True,\n",
    "    elevation_scale=75,\n",
    "    pickable=True,\n",
    "    elevation_range=[0, 100],\n",
    "    extruded=True,\n",
    "    coverage=1,\n",
    "    radius=200\n",
    ")\n",
    "\n",
    "# Set the viewport location\n",
    "view_state = pdk.ViewState(\n",
    "    longitude=df.iloc[0]['longitude'],\n",
    "    latitude=df.iloc[0]['latitude'],\n",
    "    zoom=10,\n",
    "    min_zoom=5,\n",
    "    max_zoom=15,\n",
    "    pitch=40.5,\n",
    "    bearing=-27.36,\n",
    ")\n",
    "\n",
    "# Render\n",
    "r = pdk.Deck(layers=[layer], initial_view_state=view_state)\n",
    "r.to_html(\"hexagon_layer.html\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 448\r\n",
      "drwxr-xr-x  18 schanjr  staff   576B Nov  5 16:50 \u001B[34mHDB_Resale_Prices\u001B[m\u001B[m\r\n",
      "-rw-r--r--   1 schanjr  staff    34K Oct 25 01:08 LICENSE\r\n",
      "-rw-r--r--   1 schanjr  staff   216B Nov  6 05:53 README.md\r\n",
      "drwxr-xr-x   6 schanjr  staff   192B Nov  6 06:17 \u001B[34mlib\u001B[m\u001B[m\r\n",
      "-rw-r--r--   1 schanjr  staff   175K Nov  6 05:23 poetry.lock\r\n",
      "-rw-r--r--   1 schanjr  staff   484B Nov  6 05:37 pyproject.toml\r\n",
      "drwx------   9 schanjr  staff   288B Nov  6 04:04 \u001B[34mresale-flat-prices\u001B[m\u001B[m\r\n",
      "drwxr-xr-x   3 schanjr  staff    96B Nov  6 06:19 \u001B[34msg_housing\u001B[m\u001B[m\r\n",
      "-rw-r--r--   1 schanjr  staff   3.4K Nov  6 06:29 sg_housing.ipynb\r\n",
      "drwxr-xr-x   3 schanjr  staff    96B Oct 24 00:58 \u001B[34mtests\u001B[m\u001B[m\r\n"
     ]
    }
   ],
   "source": [
    "!ls -lh"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
